import * as React from 'react'import homeIcon from '../../../public/images/Home.png'import layersIcon from '../../../public/images/icon_layer.png'import zoomInIcon from '../../../public/images/icon_zoomIn.png'import zoomOutIcon from '../../../public/images/icon_zoomOut.png'const homeStyle = { backgroundImage: `url(${homeIcon})` }const layerStyle = { backgroundImage: `url(${layersIcon})` }const zoomInStyle = { backgroundImage: `url(${zoomInIcon})` }const zoomOutStyle = { backgroundImage: `url(${zoomOutIcon})` }import {    Cartesian3,    Math} from 'cesium'import './index.less'interface IProps {    viewer: any}export default class GisTools extends React.PureComponent<IProps> {    constructor(props: IProps) {        super(props)    }    // home定位    homeView = (viewer) => {        // 定位至陕西省视图        viewer.camera.flyTo({            destination: Cartesian3.fromDegrees(109.16, 35.80, 1500000.0)        })    }    // 图层控制    showVisible = () => {        const layerPanel = document.getElementById('layerPanel')        // @ts-ignore        if (layerPanel.style.display === 'none') {            // @ts-ignore            layerPanel.style.display = 'block'        } else {            // @ts-ignore            layerPanel.style.display = 'none'        }    }    // 地图放大缩小功能    zoomIn = (viewer) => {        const obj = this.getCameraPosition(viewer)        const height = obj.height / 2        if (height > 1200) { // 相机最小高度            viewer.camera.flyTo({                destination: Cartesian3.fromDegrees(obj.centerLon, obj.centerLat, height),                duration: 1.0,                // maximumHeight: 1000            })        }    }    zoomOut = (viewer) => { // 相机最大高度        const obj = this.getCameraPosition(viewer)        const height = obj.height * 1.5        if (height < 18000000) {            viewer.camera.flyTo({                destination: Cartesian3.fromDegrees(obj.centerLon, obj.centerLat, height),                duration: 1.0            })        }    }    getCameraPosition = (viewer) => {        // 获取当前镜头位置的笛卡尔坐标        const cameraPos = viewer.camera.position        // 获取当前坐标系标准        const ellipsoid = viewer.scene.globe.ellipsoid        // 根据坐标系标准，将笛卡尔坐标转换为地理坐标        const cartographic = ellipsoid.cartesianToCartographic(cameraPos)        // 根据当前镜头的位置，获取该中心位置的经纬度坐标及高度        const centerLon = parseFloat(Math.toDegrees(cartographic.longitude).toFixed(8))        const centerLat = parseFloat(Math.toDegrees(cartographic.latitude).toFixed(8))        const height = cartographic.height        return {            centerLon,            centerLat,            height        }    }    render() {        return (            <>                <div className='bottomToolBox'>                    <div className='button-tool' style={homeStyle} onClick={this.homeView.bind(this, this.props.viewer)} />                    <div className='button-tool' style={layerStyle} onClick={this.showVisible} />                    <div className='button-tool' style={zoomInStyle} onClick={this.zoomIn.bind(this, this.props.viewer)} />                    <div className='button-tool' style={zoomOutStyle} onClick={this.zoomOut.bind(this, this.props.viewer)} />                </div>            </>        )    }}